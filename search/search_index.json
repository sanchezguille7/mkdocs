{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"About","text":"<p>Este es el condenido del archivo about de Guille</p>"},{"location":"nuevo/","title":"\u00abDockerizar\u00bb una web est\u00e1tica y publicarla en Docker Hub","text":"<p>En esta pr\u00e1ctica, he tenido que crear un archivo Dockerfile para generar una imagen Docker que incluya una aplicaci\u00f3n web est\u00e1tica. Luego, la publico en Docker Hub y realizo la implementaci\u00f3n del sitio web en Amazon Web Services (AWS) utilizando contenedores Docker y Docker Compose.</p>"},{"location":"nuevo/#requisitos-del-archivo-dockerfile","title":"Requisitos del archivo Dockerfile","text":"<p>Debo crear un archivo Dockerfile que cumpla con los siguientes requisitos:</p> <ol> <li>Utilizar la \u00faltima versi\u00f3n de nginx como imagen base.</li> <li>Instalar el software necesario para clonar el repositorio de GitHub que contiene la aplicaci\u00f3n web est\u00e1tica.</li> <li>Clonar el repositorio de GitHub que contiene la aplicaci\u00f3n web est\u00e1tica en el directorio <code>/usr/share/nginx/html/</code>, que es el directorio por defecto utilizado por Nginx para servir contenido.</li> <li>Utilizar el puerto 80 para ejecutar el servicio de Nginx dentro de la imagen.</li> <li>Ejecutar el comando <code>nginx -g 'daemon off;'</code> al iniciar el contenedor.</li> </ol>"},{"location":"nuevo/#creacion-de-la-imagen-docker-a-partir-del-archivo-dockerfile","title":"Creaci\u00f3n de la imagen Docker a partir del archivo Dockerfile","text":"<p>Para crear la imagen de Docker a partir del archivo Dockerfile deber\u00e1 ejecutar el siguiente comando.</p> <pre><code>docker build -t nginx-2048-gsm .\n</code></pre> <p></p> <p>Comprobacion:</p> <p></p> <p>Para publicar la imagen en Docker Hub es necesario que en el nombre de la imagen aparezca nuestro nombre de usuario de Docker Hub. En mi caso: sanchezguille7/nginx-2048-gsm. Le a\u00f1adimos etiquetas o tags:</p> <pre><code>docker tag nginx-2048-gsm sanchezguille7/nginx-2048-gsm:1.0\ndocker tag nginx-2048-gsm sanchezguille7/nginx-2048-gsm:latest\n</code></pre> <p></p>"},{"location":"nuevo/#publicar-la-imagen-en-docker-hub","title":"Publicar la imagen en Docker Hub","text":"<p>Una vez que le hemos asignado un nombre correcto a la imagen y le hemos a\u00f1adido las etiquetas, podemos publicarla en Docker Hub.</p> <p>Lo primero que tenemos que hacer es iniciar sesi\u00f3n en Docker Hub desde nuestra instancia de AWS con el comando donde pondremos nuestros credenciales de Docker Hub:</p> <pre><code>docker login\n</code></pre> <p></p> <p>Para publicar la imagen con las dos etiquetas que hemos creado:</p> <pre><code>docker push sanchezguille7/nginx-2048-gsm:1.0\n\ndocker push sanchezguille7/nginx-2048-gsm:latest\n</code></pre> <p></p> <p>Se puede comprobar la creaci\u00f3n en mi perfil de Docker Hub(si pinchas en la imagen te lleva directamente):</p> <p> ( https://hub.docker.com/repository/docker/sanchezguille7/nginx-2048-gsm/general )</p>"},{"location":"nuevo/#comprobacion-de-que-funciona","title":"Comprobacion de que funciona","text":"<p>IP elastica de mi m\u00e1quina de AWS:</p> <p></p> <p>Pagina web est\u00e1tica:</p> <p></p> <p>Comando para lanzarlo:</p> <p></p>"},{"location":"readme/","title":"Docker Web 2","text":"<p>Es la misma din\u00e1mica que Docker-web pero con Ubuntu 23.04 Este proyecto consiste en crear un contenedor Docker que ejecuta una aplicaci\u00f3n del juego 2048 en un servidor Apache. Utiliza un archivo Dockerfile para construir la imagen del contenedor y un archivo docker-compose.yml para definir y configurar el entorno de ejecuci\u00f3n.</p>"},{"location":"readme/#archivos","title":"Archivos:","text":"<p>Dockerfile: Este archivo define c\u00f3mo se construir\u00e1 la imagen del contenedor Docker. Utiliza una imagen base de Ubuntu 23.04, instala Git y Apache2, clona el repositorio de la aplicaci\u00f3n 2048 desde GitHub, mueve los archivos al directorio de documentos ra\u00edz de Apache y expone el puerto 80 para que la aplicaci\u00f3n sea accesible desde el exterior. Adem\u00e1s, define el comando para iniciar Apache2 en primer plano.</p> <p></p> <p>docker-compose.yml: Este archivo describe los servicios para el entorno Docker utilizando Docker Compose. Define el servicio de nginx que construye la imagen a partir del directorio ./app mapea el puerto 80 del contenedor al puerto 80 del host, y establece que el servicio se reinicie autom\u00e1ticamente en caso de fallo.</p>"},{"location":"readme/#instrucciones-de-uso","title":"Instrucciones de Uso:","text":"<ol> <li>Clona este repositorio en tu m\u00e1quina local.</li> <li>Aseg\u00farate de tener Docker y Docker Compose instalados en tu sistema.</li> <li>En la terminal, navega hasta el directorio del proyecto clonado.</li> <li> <p>Ejecuta el siguiente comando para construir y ejecutar los contenedores:     docker-compose up --build</p> </li> <li> <p>Una vez que los contenedores est\u00e9n en ejecuci\u00f3n, abre un navegador web y visita http://localhost para jugar al juego 2048.</p> </li> </ol> <p></p>"}]}